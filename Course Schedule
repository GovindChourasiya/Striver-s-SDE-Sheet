class Solution {
    public boolean checkCycle(int i, int[][] pre, int[] vis, int[] dfsVis) {
        vis[i] = 1;
        dfsVis[i] = 1;

        for (int[] n : pre) {
            if (n[0] == i) {
                int nextCourse = n[1];
                if (vis[nextCourse] == 0) {
                    if (checkCycle(nextCourse, pre, vis, dfsVis)) {
                        return true;
                    }
                } else if (dfsVis[nextCourse] == 1) {
                    return true;
                }
            }
        }

        dfsVis[i] = 0;  
        return false;
    }

    public boolean canFinish(int num, int[][] pre) {
        int vis[] = new int[num];
        int dfsVis[] = new int[num];

        for (int i = 0; i < num; i++) {
            if (vis[i] == 0) {
                if (checkCycle(i, pre, vis, dfsVis)) {
                    return false;  
                }
            }
        }

        return true; 
    }
}
