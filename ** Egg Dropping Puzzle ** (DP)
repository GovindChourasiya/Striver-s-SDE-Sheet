class Solution 
{
    //Function to find minimum number of attempts needed in 
    //order to find the critical floor.
    static int solve(int n, int k, int[][] dp){
        if(n == 1 || k == 0 || k == 1){
            return k;
        }
        if(dp[n][k] != -1){
            return dp[n][k];
        }
        
        int minAttempts = Integer.MAX_VALUE;
        
        for(int i=1;i<=k;i++){
            int breaks = solve(n-1,i-1,dp);
            int notBreaks = solve(n,k-i,dp);
            
            int attempts = 1 + Math.max(breaks,notBreaks);
            
            minAttempts = Math.min(minAttempts,attempts);
            
        }
        
    return dp[n][k] = minAttempts;
        
    }
    static int eggDrop(int n, int k) 
	{
	    // Your code here
	    int[][] dp = new int[n+1][k+1];
	    for(int arr[] : dp){
	        Arrays.fill(arr,-1);
	    }
	    return solve(n,k,dp);
	}
}
