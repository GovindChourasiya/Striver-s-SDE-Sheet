class Solution{
    public int solve(int idx, int[]price, int n, int[][] dp){
        if(n == 0){
            return 0;
        }
        if(idx == 0){
            return (n*price[0]);
        }
        if(dp[idx][n] != -1){
            return dp[idx][n];
        }
        int notTake = solve(idx-1,price,n,dp);
        int take = Integer.MIN_VALUE;
        if((idx+1) <= n){
            take = price[idx] + solve(idx,price,n-(idx+1),dp);
        }
        
        return dp[idx][n] = Math.max(take,notTake);
    }
    public int cutRod(int price[], int n) {
        //code here
        int[][] dp = new int[n][n+1];
        for(int arr[] : dp){
            Arrays.fill(arr,-1);
        }
        return solve(n-1,price,n,dp);
        
    }
}
