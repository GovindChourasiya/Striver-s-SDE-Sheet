class Solution {
    static boolean findSubset(int idx, int[] arr, int sum, int[][] dp) {
        if (sum == 0) {
            return true;
        }
        if (idx == 0) {
            return arr[0] == sum;
        }
        if (dp[idx][sum] != -1) {
            return dp[idx][sum] == 1;
        }
        
        boolean notTake = findSubset(idx - 1, arr, sum, dp);
        boolean take = false;
        if (sum >= arr[idx]) {
            take = findSubset(idx - 1, arr, sum - arr[idx], dp);
        }
        
        dp[idx][sum] = (notTake || take) ? 1 : 0;
        return notTake || take;
    }

    static boolean isSubsetSum(int arr[], int sum) {
        int n = arr.length;
        int dp[][] = new int[n][sum + 1];
        for (int[] a : dp) {
            Arrays.fill(a, -1);
        }
        return findSubset(n - 1, arr, sum, dp);
    }
}
