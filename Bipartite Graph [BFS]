class Solution {
    public boolean helper(int i, int n, int[][] graph, int[] color) {
        Queue<Integer> que = new LinkedList<>();

        que.add(i);
        color[i] = 0;
        while (!que.isEmpty()) {
            int node = que.poll();
            for (int neigh : graph[node]) {
                if (color[neigh] == -1) {
                    color[neigh] = 1 - color[node];
                    que.add(neigh);
                } else if (color[neigh] == color[node]) {
                    return false;
                }
            }
        }
        return true;
    }

    public boolean isBipartite(int[][] graph) {
        int n = graph.length;
        int[] color = new int[n];
        for (int i = 0; i < n; i++) color[i] = -1;

        for (int i = 0; i < n; i++) {
            if (color[i] == -1) {
                if (!helper(i, n, graph, color)) {
                    return false;
                }
            }
        }
        return true;
    }
}
