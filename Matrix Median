class Solution {
    int upperBound(int arr[], int x, int C){
        int low = 0;
        int high = C-1;
        int ans = C;
        while(low <= high){
            int mid = (low+high)/2;
            if(arr[mid] > x){
                ans = mid;
                high = mid-1;
            } else{
                low = mid+1;
            }
        }
        return ans;
    }
    int countSmall(int matrix[][], int R, int C, int x){
        int count = 0;
        for(int i=0;i<R;i++){
            count += upperBound(matrix[i],x,C);
        }
        return count;
    }
    int median(int matrix[][], int R, int C) {
        // code here   
        int low = Integer.MAX_VALUE, high = Integer.MIN_VALUE;
        for(int i=0;i<R;i++){
            low = Math.min(matrix[i][0],low);
            high = Math.max(matrix[i][C-1],high);
        }
        
        int req = (R*C)/2;
        while(low <= high){
            int mid = (low + high)/2;
            int smallEq = countSmall(matrix,R,C,mid);
            
            if(smallEq <= req) low = mid+1;
            else high = mid-1;
        }
        
        return low;
    }
}
