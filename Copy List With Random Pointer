/*
// Definition for a Node.
class Node {
    int val;
    Node next;
    Node random;

    public Node(int val) {
        this.val = val;
        this.next = null;
        this.random = null;
    }
}
*/

class Solution {
    public Node copyRandomList(Node head) {
        if (head == null) {
            return null;
        }

        Map<Node, Node> map = new HashMap<>();
        Node curr = head;

        // First pass: Copy all nodes and put them in the map
        while (curr != null) {
            map.put(curr, new Node(curr.val)); // Corrected curr.label to curr.val
            curr = curr.next;
        }

        curr = head;
        // Second pass: Assign next and random pointers
        while (curr != null) {
            map.get(curr).next = map.get(curr.next);
            map.get(curr).random = map.get(curr.random);
            curr = curr.next;
        }

        // Return the head of the new copied list
        return map.get(head);
    }
}
