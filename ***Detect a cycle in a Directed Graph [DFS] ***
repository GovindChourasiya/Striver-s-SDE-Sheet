class Solution {
    public boolean canFinish(int num, int[][] pre) {
        int[] indegree = new int[num];
        for (int[] pair : pre) {
            indegree[pair[0]]++;
        }
        
        Queue<Integer> que = new LinkedList<>();
        for (int i = 0; i < num; i++) {
            if (indegree[i] == 0) {
                que.add(i);
            }
        }

        int count = 0;
        while (!que.isEmpty()) {
            int node = que.poll();
            count++;
            for (int[] pair : pre) {
                if (pair[1] == node) {
                    indegree[pair[0]]--;
                    if (indegree[pair[0]] == 0) que.add(pair[0]);
                }
            }
        }
        if (count != num) return false;

        return true;
    }
}
