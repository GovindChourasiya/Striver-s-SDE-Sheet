class Solution {
    public int orangesRotting(int[][] grid) {
        if(grid == null || grid.length == 0) return 0;
        
        int rows = grid.length;
        int cols = grid[0].length;
        Queue<int[]> que = new LinkedList<>();
        int count_fresh = 0;

        // Initialize the queue with all initially rotten oranges and count fresh oranges
        for(int i = 0; i < rows; i++) {
            for(int j = 0; j < cols; j++) {
                if(grid[i][j] == 2) {
                    que.offer(new int[]{i, j});
                }
                if(grid[i][j] == 1) {
                    count_fresh++;
                }
            }
        }

        // If there are no fresh oranges, return 0
        if(count_fresh == 0) return 0;

        int countMin = 0;
        int dx[] = {-1, 0, 1, 0};
        int dy[] = {0, 1, 0, -1};

        // BFS starting from initially rotten oranges
        while(!que.isEmpty()) {
            int size = que.size();
            boolean rotOccurred = false;
            for(int i = 0; i < size; i++) {
                int[] point = que.poll();
                for(int j = 0; j < 4; j++) {
                    int x = point[0] + dx[j];
                    int y = point[1] + dy[j];

                    // Check if the adjacent cell is valid and has a fresh orange
                    if(x >= 0 && y >= 0 && x < rows && y < cols && grid[x][y] == 1) {
                        grid[x][y] = 2;
                        que.offer(new int[]{x, y});
                        count_fresh--;
                        rotOccurred = true;
                    }
                }
            }
            // If a new rotten orange has been added, increase the minute counter
            if(rotOccurred) countMin++;
        }

        // If there are still fresh oranges left, return -1
        return count_fresh == 0 ? countMin : -1;
    }
}
