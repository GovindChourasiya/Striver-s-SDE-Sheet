class Solution {
    String s1,s2;
    int dp[][];
    public int LCS(int idx1, int idx2){
        if(idx1 < 0 || idx2 < 0){
            return 0;
        }
        if(dp[idx1][idx2] != -1){
            return dp[idx1][idx2];
        }

        if(s1.charAt(idx1) == s2.charAt(idx2)){
            dp[idx1][idx2] = 1 + LCS(idx1-1,idx2-1);
        } else{
            dp[idx1][idx2] = Math.max(LCS(idx1-1,idx2),LCS(idx1,idx2-1));
        }

        return dp[idx1][idx2];
    }
    public int longestPalindromeSubseq(String s) {
        StringBuilder sb = new StringBuilder(s);
        String str = sb.reverse().toString();
        this.s1 = s;
        this.s2 = str;

        dp = new int[s1.length()][s2.length()];
        for(int i=0;i<s1.length();i++){
            for(int j=0;j<s2.length();j++){
                dp[i][j] = -1;
            }
        }
        return LCS(s1.length()-1,s2.length()-1);
    }
}
