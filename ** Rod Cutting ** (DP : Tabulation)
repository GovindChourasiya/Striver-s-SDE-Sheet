class Solution {
    public int solve(int idx, int[] price, int n, int[][] dp) {
        if (n == 0) {
            return 0;
        }
        if (idx == 0) {
            return n * price[0];
        }
        if (dp[idx][n] != -1) {
            return dp[idx][n];
        }
        int notTake = solve(idx - 1, price, n, dp);
        int take = Integer.MIN_VALUE;
        if ((idx + 1) <= n) {
            take = price[idx] + solve(idx, price, n - (idx + 1), dp);
        }

        return dp[idx][n] = Math.max(take, notTake);
    }

    public int cutRod(int[] price, int n) {
        int[][] dp = new int[n][n + 1];
        for (int[] arr : dp) {
            Arrays.fill(arr, -1);
        }

        for (int N = 0; N <= n; N++) {
            dp[0][N] = N * price[0];
        }

        for (int idx = 1; idx < n; idx++) {
            for (int N = 0; N <= n; N++) {
                int notTake = dp[idx - 1][N];
                int take = Integer.MIN_VALUE;
                if ((idx + 1) <= N) {
                    take = price[idx] + dp[idx][N - (idx + 1)];
                }
                dp[idx][N] = Math.max(take, notTake);
            }
        }

        return dp[n - 1][n];
    }
}
