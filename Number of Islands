class Pair {
    int first;
    int second;
    Pair(int first, int second) {
        this.first = first;
        this.second = second;
    }
}

class Solution {
    public void bfs(int row, int col, int[][] vis, char[][] grid) {
        vis[row][col] = 1;
        Queue<Pair> que = new LinkedList<>();
        que.add(new Pair(row, col));
        int n = grid.length;
        int m = grid[0].length;
        while (!que.isEmpty()) {
            int r = que.peek().first;
            int c = que.peek().second;
            que.poll();
            if (r - 1 >= 0 && grid[r - 1][c] == '1' && vis[r - 1][c] == 0) {
                vis[r - 1][c] = 1;
                que.offer(new Pair(r - 1, c));
            }
            if (r + 1 < n && grid[r + 1][c] == '1' && vis[r + 1][c] == 0) {
                vis[r + 1][c] = 1;
                que.offer(new Pair(r + 1, c));
            }
            if (c + 1 < m && grid[r][c + 1] == '1' && vis[r][c + 1] == 0) {
                vis[r][c + 1] = 1;
                que.offer(new Pair(r, c + 1));
            }
            if (c - 1 >= 0 && grid[r][c - 1] == '1' && vis[r][c - 1] == 0) {
                vis[r][c - 1] = 1;
                que.offer(new Pair(r, c - 1));
            }
        }
    }

    public int numIslands(char[][] grid) {
        int n = grid.length;
        int m = grid[0].length;
        int[][] vis = new int[n][m];
        int count = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (vis[i][j] == 0 && grid[i][j] == '1') {
                    count++;
                    bfs(i, j, vis, grid);
                }
            }
        }
        return count;
    }
}
